{
    "version": "https://jsonfeed.org/version/1",
    "title": "淮靳的小窝",
    "subtitle": "人生得意需尽欢，莫使金樽空对月",
    "icon": "http://example.com/images/favicon.ico",
    "description": "Within Reach",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/09/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "url": "http://example.com/2024/09/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "title": "数据结构",
            "date_published": "2024-09-07T05:47:07.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p><img data-src=\"https://qn-s0.yuketang.cn/FnwP0YsxIIbOoGBEHgLh3q2e8ccw\" alt=\"img\"></p>\n<p><img data-src=\"https://qn-s0.yuketang.cn/FphwbtOLDRQLqbNL7aFYwuwTwzsb\" alt=\"img\"><img data-src=\"https://qn-s0.yuketang.cn/FuwA-1iZ_jljrn0NZptOFX0DSedb\" alt=\"img\"></p>\n<p><img data-src=\"https://qn-s0.yuketang.cn/FqUamKxZ7W3PJkyu-9o4bwjsNUKs\" alt=\"img\"></p>\n<p><img data-src=\"https://qn-s0.yuketang.cn/Fh9ReSfdu3J7mRWTzJYndaBWy4s0\" alt=\"img\"></p>\n<p>可以用抽象数据类型定义个完整的数据结构</p>\n<p>数据项是数据的最小单位</p>\n<p>计算机所处理的数据一般具备某种内在联系，这是指元素与元素之间存在某种关系</p>\n<p>在数据结构中，与所使用的计算机无关的是数据的逻辑结构</p>\n<p>数据的逻辑结构可以分为线性结构和非线性结构两类</p>\n<p>数据的逻辑结构是指数据元素之间逻辑 关系的整体</p>\n<p>数据的逻辑结构的说法中数据的逻辑结构独立于其存储结构</p>\n<p><strong>数据的逻辑结构独立于其存储结构</strong></p>\n<ul>\n<li><strong>正确</strong>。数据的逻辑结构是对数据元素之间的逻辑关系的抽象表示，强调的是数据之间的逻辑关系。而存储结构则是数据在计算机内的具体存储方式。逻辑结构和存储结构是独立的概念，逻辑结构不依赖于存储结构。</li>\n</ul>\n<p><strong>B. 数据的存储结构独立于其逻辑结构</strong></p>\n<ul>\n<li><strong>错误</strong>。数据的存储结构实际上是根据逻辑结构来决定的。存储结构是逻辑结构的物理实现方式，不同的逻辑结构会有不同的存储实现方式。因此，存储结构不能完全独立于逻辑结构。</li>\n</ul>\n<p><strong>C. 数据的逻辑结构唯一决定了其存储结构</strong></p>\n<ul>\n<li><strong>错误</strong>。虽然存储结构是依据逻辑结构进行设计的，但一个逻辑结构可以有多种存储结构。例如，线性表可以用顺序存储（数组）或链式存储（链表）来实现，所以逻辑结构并不唯一决定存储结构。</li>\n</ul>\n<p><strong>D. 数据结构仅由其逻辑结构和存储结构决定</strong></p>\n<ul>\n<li><strong>错误</strong>。虽然逻辑结构和存储结构是数据结构的两个重要方面，但它们不能完全决定所有的数据结构，还需要考虑数据操作和算法的实现。因此，数据结构不仅仅由逻辑结构和存储结构决定。</li>\n</ul>\n<p>时间复杂度是 O (n^2), 表明该算法的<br>\n执行时间与 n^2 呈正比</p>\n<p>算法原地工作 指算法所需要的辅助空间是常量。</p>\n<p>时间复杂度是指最坏情况下估算算法执行时间的一个上界</p>\n<p>同一个算法实现语言的级别越高，执行效率越低</p>\n<p>在计算机存储数据时，通常不仅要存储各数据元素的值，而且还要存储数据元素之间的关系</p>\n<p>数据结构在计算机内存中的表示是指数据的存储结构</p>\n<p>逻辑上相邻的两个元素对应的物理结构地址是相邻的，这种存储结构称之为顺序存储结构</p>\n<p>数据的运算</p>\n<p>这个问题是关于数据的运算相关的知识，以下是对四个选项的解释：</p>\n<p><strong>A. 与采用的何种存储结构有关</strong></p>\n<ul>\n<li><strong>正确</strong>。数据的运算与存储结构息息相关。不同的存储结构会直接影响数据的操作效率、数据访问的方式以及算法的复杂度。例如，数组和链表在插入和删除操作上的效率是不一样的。</li>\n</ul>\n<p><strong>B. 根据存储结构来定义的效率</strong></p>\n<ul>\n<li><strong>错误</strong>。虽然存储结构会影响数据的运算效率，但数据的运算并不直接由存储结构定义。存储结构只是影响效率的一个因素，真正决定效率的还有具体的操作和算法。</li>\n</ul>\n<p><strong>C. 有算术运算和关系运算</strong></p>\n<ul>\n<li><strong>错误</strong>。虽然数据的运算可能涉及算术运算和关系运算，但并不仅限于这两类运算。数据运算还可能包括逻辑运算、集合运算等，因此这个选项过于局限。</li>\n</ul>\n<p><strong>D. 必须用程序设计语言来描述</strong></p>\n<ul>\n<li><strong>错误</strong>。数据运算并不一定需要通过程序设计语言来描述。数据的运算可以是理论上的，也可以在数学模型或算法中进行描述，不一定非要通过编程语言实现。</li>\n</ul>\n<p>规定的时间内完成不是算法的基本特征</p>\n<p>指令序列长度有限是算法的基本特征</p>\n<p>链式存储设计时，结点内的存储单元地址不一定连续</p>\n<h3 id=\"解释选项\"><a class=\"anchor\" href=\"#解释选项\">#</a> 解释选项：</h3>\n<ol>\n<li>\n<p><strong>A. 一定连续</strong>（正确答案）</p>\n<ul>\n<li><strong>解释</strong>：在链式存储中，结点的存储单元<strong>一定是连续的</strong>。链表中的每个结点都包含两个部分，一个是数据域（存储数据），另一个是指针域（存储指向下一个结点的地址）。链表的连续性主要体现在逻辑顺序上，即每个结点通过指针连接在一起，构成一条链，<strong>而在物理内存中的位置不一定是连续的</strong>。</li>\n</ul>\n<p><strong>存储单元地址</strong>，又称为<strong>内存地址</strong>，是指计算机内存中一个特定存储单元的位置标识符。每个存储单元可以存储一定数量的数据（通常是一个字节或多个字节），而这个存储单元的地址是用于引用或访问该数据的。</p>\n<h3 id=\"详细解释\"><a class=\"anchor\" href=\"#详细解释\">#</a> 详细解释：</h3>\n<ol>\n<li><strong>存储单元</strong>：计算机的内存可以被看作是由大量的存储单元组成的，每个存储单元可以存储一部分数据。内存的最小存储单元通常是<strong>字节</strong>，即 8 位（1 字节 = 8 位）。</li>\n<li><strong>地址</strong>：存储单元的地址是计算机对内存进行管理的方式。每个存储单元在内存中的位置都可以通过一个唯一的编号 ——<strong> 地址</strong>来标识。例如，内存中可能有存储单元 0、1、2、3…… 一直到最大容量的存储单元。</li>\n<li><strong>作用</strong>：在编程中，程序通过地址访问内存中的数据。当我们存储或检索数据时，操作系统会通过存储单元地址找到数据所在的位置。例如，当我们定义一个变量时，该变量的值存储在内存的某个地址处，程序通过该变量的地址访问存储的值。</li>\n<li><strong>逻辑地址与物理地址</strong>：在某些系统中，程序员看到的是<strong>逻辑地址</strong>，而操作系统和硬件使用的是<strong>物理地址</strong>。逻辑地址是程序看到的地址空间，而操作系统通过地址映射将其映射到实际的物理地址。</li>\n</ol>\n<h3 id=\"存储单元地址的特点\"><a class=\"anchor\" href=\"#存储单元地址的特点\">#</a> 存储单元地址的特点：</h3>\n<ul>\n<li>存储单元地址通常用<strong>十六进制</strong>表示，因为十六进制更简洁且与二进制内存结构直接对应。</li>\n<li>现代计算机使用<strong>字节地址</strong>，即每个字节都有一个唯一的地址。</li>\n<li>在动态内存中，存储单元地址是由系统分配和管理的，例如在链表或其他动态数据结构中，存储单元的地址是不连续的，但通过地址指针可以访问这些存储单元。</li>\n</ul>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子：</h3>\n<p>假设有一块内存，划分为几个字节的存储单元，每个存储单元都有唯一的地址：</p>\n<table>\n<thead>\n<tr>\n<th>地址（十六进制）</th>\n<th>数据（字节）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x0001</td>\n<td>01010101</td>\n</tr>\n<tr>\n<td>0x0002</td>\n<td>11001100</td>\n</tr>\n<tr>\n<td>0x0003</td>\n<td>11110000</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody>\n</table>\n<p>在这个例子中， <code>0x0001</code>  是一个存储单元的地址，存储的数据是  <code>01010101</code> （即二进制数据）。</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h3>\n<p><strong>存储单元地址</strong>是计算机内存管理的基本单位，每个存储单元的地址唯一标识该存储位置。通过地址，程序可以读取或写入存储在内存中的数据。</p>\n</li>\n</ol>\n<p><strong>算法</strong> 是指为了解决某个问题，给出的一系列明确、具体的步骤或规则。换句话说，算法是问题求解的步骤性描述，旨在通过系统化的过程解决某个特定问题。下面我们来逐项分析选项：</p>\n<ul>\n<li><strong>A：程序</strong><br>\n虽然程序通常是算法的实现形式，但算法和程序并不完全相同。算法是问题求解的逻辑和思路，而程序是将算法编写为计算机可以执行的代码。因此，算法不等同于程序。</li>\n<li><strong>B：问题求解步骤的描述</strong><br>\n这就是算法的本质定义。算法就是用于解决特定问题的一系列明确的步骤。这个定义是准确的，因此 B 是正确答案。</li>\n<li><strong>C：要满足五个基本特性</strong><br>\n虽然经典算法理论确实提到算法应具有五个基本特性（输入、输出、确定性、有穷性和可行性），但选项 C 不是对算法本质的正确描述，而只是算法应具有的特性之一。</li>\n<li><strong>D：选项 A 与 C 都对</strong><br>\n选项 A 不完全正确，选项 C 也不完全准确，因此 D 是错误的。</li>\n</ul>\n<p>程序不一定满足有穷性，如死循环，操作系统等</p>\n<p>算法必须有穷举性。</p>\n<p>那些特性是算法的必要条件，不能成为算法的定义。</p>\n",
            "tags": [
                "数据结构",
                "数据结构"
            ]
        },
        {
            "id": "http://example.com/2024/08/18/Java-%E5%90%8E%E7%AB%AF/",
            "url": "http://example.com/2024/08/18/Java-%E5%90%8E%E7%AB%AF/",
            "title": "Java 后端",
            "date_published": "2024-08-18T10:50:44.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>在 Java 开发中，特别是采用前后端分离架构时，实现一个完整的业务功能通常涉及多个层次和组件。你提到的 <code>entity</code> 、 <code>service</code> 、 <code>mapper</code> 、 <code>controller</code>  和 <code>impl</code> （implementation）是常见的后端开发组成部分。这些组件一起工作，帮助实现从数据库到前端的完整数据流。让我们逐一解析它们的作用：</p>\n<h3 id=\"1-entity\"><a class=\"anchor\" href=\"#1-entity\">#</a> 1. <strong>Entity</strong></h3>\n<ul>\n<li>\n<p><strong>功能</strong>：实体类（Entity）通常用于表示数据库中的表结构。每个实体类对应数据库中的一张表，类中的每个字段对应表中的一列。</p>\n</li>\n<li>\n<p><strong>位置</strong>：它通常放在项目的 <code>model</code>  或 <code>entity</code>  包中。</p>\n</li>\n<li>\n<p>示例</p>\n<p>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java复制代码<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"comment\">// getters and setters</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-mapper\"><a class=\"anchor\" href=\"#2-mapper\">#</a> 2. <strong>Mapper</strong></h3>\n<ul>\n<li>\n<p><strong>功能</strong>: Mapper 接口（有时称为 DAO，Data Access Object）负责定义与数据库的交互方法。它通常包含一些 CRUD（创建、读取、更新、删除）操作的方法声明。在使用 MyBatis 等框架时，Mapper 接口还可以通过注解或 XML 文件直接关联 SQL 语句。</p>\n</li>\n<li>\n<p><strong>位置</strong>：它通常放在 <code>mapper</code>  或 <code>dao</code>  包中。</p>\n</li>\n<li>\n<p>示例</p>\n<p>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java复制代码<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\">    User <span class=\"title function_\">selectUserById</span><span class=\"params\">(Long id)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">insertUser</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">(Long id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-service\"><a class=\"anchor\" href=\"#3-service\">#</a> 3. <strong>Service</strong></h3>\n<ul>\n<li>\n<p><strong>功能</strong>：服务层（Service）处理业务逻辑。它调用 Mapper 接口的方法执行数据库操作，并根据需求对数据进行处理。Service 层将多个 DAO 层操作组合起来，封装成更高层次的业务逻辑。</p>\n</li>\n<li>\n<p><strong>位置</strong>：它通常放在 <code>service</code>  包中。</p>\n</li>\n<li>\n<p>示例</p>\n<p>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java复制代码<span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    User <span class=\"title function_\">getUserById</span><span class=\"params\">(Long id)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">createUser</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">(Long id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"4-service-implementation-impl\"><a class=\"anchor\" href=\"#4-service-implementation-impl\">#</a> 4. <strong>Service Implementation (Impl)</strong></h3>\n<ul>\n<li>\n<p><strong>功能</strong>：这是 Service 接口的具体实现类。它通常使用 <code>@Service</code>  注解，并实现接口中的所有方法。该实现类负责具体调用 Mapper 层的方法，并对业务逻辑进行具体实现。</p>\n</li>\n<li>\n<p><strong>位置</strong>：它通常放在 <code>service.impl</code>  包中。</p>\n</li>\n<li>\n<p>示例</p>\n<p>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java复制代码<span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.selectUserById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        userMapper.insertUser(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span> &#123;</span><br><span class=\"line\">        userMapper.updateUser(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        userMapper.deleteUser(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-controller\"><a class=\"anchor\" href=\"#5-controller\">#</a> 5. <strong>Controller</strong></h3>\n<ul>\n<li>\n<p><strong>功能</strong>：控制器层（Controller）是 Web 应用程序的入口点。它接收来自前端的 HTTP 请求，调用 Service 层的业务逻辑处理请求，并将结果返回给前端。控制器通常使用 <code>@RestController</code>  或 <code>@Controller</code>  注解。</p>\n</li>\n<li>\n<p><strong>位置</strong>：它通常放在 <code>controller</code>  包中。</p>\n</li>\n<li>\n<p>示例</p>\n<p>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java复制代码<span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/users&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;User&gt; <span class=\"title function_\">getUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userService.getUserById(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseEntity.ok(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;Void&gt; <span class=\"title function_\">createUser</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> User user)</span> &#123;</span><br><span class=\"line\">        userService.createUser(user);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseEntity.status(HttpStatus.CREATED).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;Void&gt; <span class=\"title function_\">updateUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Long id, <span class=\"meta\">@RequestBody</span> User user)</span> &#123;</span><br><span class=\"line\">        user.setId(id);</span><br><span class=\"line\">        userService.updateUser(user);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseEntity.ok().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;Void&gt; <span class=\"title function_\">deleteUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> Long id)</span> &#123;</span><br><span class=\"line\">        userService.deleteUser(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseEntity.noContent().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"整体工作流程\"><a class=\"anchor\" href=\"#整体工作流程\">#</a> 整体工作流程</h3>\n<ol>\n<li><strong>Entity</strong>：定义数据库中的数据结构。</li>\n<li><strong>Mapper</strong>：定义对数据库的具体操作方法。</li>\n<li><strong>Service</strong>：定义业务逻辑，调用 Mapper 执行数据操作。</li>\n<li><strong>Impl</strong>：实现 Service 接口，具体执行业务逻辑。</li>\n<li><strong>Controller</strong>：接收前端请求，调用 Service 层执行业务逻辑，返回处理结果。</li>\n</ol>\n<p>通过以上五个组件，后端可以很好地分层管理代码，使得代码更加清晰、易于维护，同时便于团队协作。每个层次都有清晰的职责分工，减少了耦合度。</p>\n<p><code>@Setter</code>  和  <code>@Getter</code>  是 Lombok 库中的两个注解，用于自动生成 Java 类中的 getter 和 setter 方法。这些注解可以简化 Java 类的代码，减少手动编写重复性的 getter 和 setter 方法。</p>\n<ul>\n<li><strong> <code>@Getter</code> </strong> : 自动为类中的字段生成 getter 方法。这个方法会返回字段的值。你可以将这个注解放在类级别（类的所有字段都会有 getter 方法），也可以放在具体字段上（仅为这个字段生成 getter 方法）。</li>\n<li><strong> <code>@Setter</code> </strong> : 自动为类中的字段生成 setter 方法。这个方法允许设置字段的值。你可以将这个注解放在类级别（类的所有字段都会有 setter 方法），也可以放在具体字段上（仅为这个字段生成 setter 方法）。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Setter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Getter</span> <span class=\"meta\">@Setter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Getter</span> <span class=\"meta\">@Setter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Java",
                "Java"
            ]
        },
        {
            "id": "http://example.com/2024/08/03/9adgq-%E5%81%9A%E5%8F%8A%E6%A0%BC%E7%9A%84%E5%88%A9%E4%BB%96%E8%80%85-%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB%EF%BC%8C%E8%B5%B7%E6%BA%90/",
            "url": "http://example.com/2024/08/03/9adgq-%E5%81%9A%E5%8F%8A%E6%A0%BC%E7%9A%84%E5%88%A9%E4%BB%96%E8%80%85-%E6%98%9F%E6%98%9F%E4%B9%8B%E7%81%AB%EF%BC%8C%E8%B5%B7%E6%BA%90/",
            "title": "9adgq 做及格的利他者 星星之火，起源",
            "date_published": "2024-08-03T08:07:56.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>突然发现很多人已经做好了这份总结的工作，那我就可以省事了，零碎时间去看，集中性时间学习从事自己的领域，大不了一个内容看几遍，反复看，当我逐渐接近他算法的本质，去帮助人时，也不需要其他的记录了，毕竟想保存好一个东西，需要的是像论语，圣经，道德经等一样让人们自己发自内心的想保存它</p>\n<h1 id=\"缘\"><a class=\"anchor\" href=\"#缘\">#</a> 缘</h1>\n<h2 id=\"起因为了有效提高学习效率备份9adgq的智慧加之之前从未有记笔记的习惯更为了未来便于保存便于传播便定于在这个静态博客构建为了提高有效思考效率故以后学习提高认知尽可能多的用电脑学习而非用手机并着力保存留档-后面也会多用素问知乎来做\"><a class=\"anchor\" href=\"#起因为了有效提高学习效率备份9adgq的智慧加之之前从未有记笔记的习惯更为了未来便于保存便于传播便定于在这个静态博客构建为了提高有效思考效率故以后学习提高认知尽可能多的用电脑学习而非用手机并着力保存留档-后面也会多用素问知乎来做\">#</a> 起因：为了有效提高学习效率，备份 9adgq 的 “智慧”，加之之前从未有记笔记的习惯，更为了未来便于保存，便于传播便定于在这个静态博客构建，为了提高有效思考效率，故以后学习提高认知尽可能多的用电脑学习，而非用手机，并着力保存，留档   后面也会多用素问，知乎来做</h2>\n<p>将会将 9adgq 的发言复制粘贴到这里来留取存档，本 md 作为 “新建文件夹” 类的开端</p>\n",
            "tags": [
                "9adgq",
                "9adgq"
            ]
        },
        {
            "id": "http://example.com/2024/07/07/%E7%AE%97%E6%B3%95/",
            "url": "http://example.com/2024/07/07/%E7%AE%97%E6%B3%95/",
            "title": "算法",
            "date_published": "2024-07-07T04:46:32.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"我知道我想要的\"><a class=\"anchor\" href=\"#我知道我想要的\">#</a> 我知道我想要的</h1>\n<p>我知道，我只是不反感算法，但它不是能陪我一辈子的寄托，我做题，只是因为有意思，比赛能拿奖，能熟练 c++,py,go 三种语言语法，快比赛了，可以全身心投入准备了，先暂时停更个人博客前端。</p>\n",
            "tags": [
                "算法",
                "语法"
            ]
        },
        {
            "id": "http://example.com/2024/06/26/%E8%8B%B1%E8%AF%AD%E8%80%83%E5%89%8D%E5%A4%8D%E4%B9%A0/",
            "url": "http://example.com/2024/06/26/%E8%8B%B1%E8%AF%AD%E8%80%83%E5%89%8D%E5%A4%8D%E4%B9%A0/",
            "title": "（考完后记录，继上学期期末考试的全原题，3次itest测试的原题，这次又两道听力原题 英语考前复习圆满成功，突击的效果特别好",
            "date_published": "2024-06-26T05:39:45.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">哈哈哈哈哈哈，这么复习真的好爽，边打字，边听歌，以后一定要给我的小窝弄越来越多的歌，想办法把vip的歌给解决掉</span><br></pre></td></tr></table></figure>\n<p><strong>Within Reach（努力假装是个 npc）:</strong><br>\n<strong> 复习范围：视听说 5-8 单元；能源学术英语二：阅读 Unit 1 Text 1 （Historical Per Capita Energy Consumption），Unit 2 Text 2 （Energy Access and Health），Unit 3 Text 1 （The Hidden Costs of Fossil Fuels），Unit 3  Text 2  （Global Warming: It’s About Energy），Unit 4  Text 2 （Install Residential Solar Panels and Save）；翻译：，课文挑句子</strong></p>\n<p>Unit 1 Text1</p>\n<p>Historical Per Capita Energy Comsumption</p>\n<p>Per capita 人均的</p>\n<p>advanced 先进的，高级的</p>\n<p>industrial 工业的，产业的</p>\n<p>evolve 逐步发展，逐渐演变</p>\n<p>label 贴标签于，把… 称为</p>\n<p>kilocalorie 千卡</p>\n<p>megajoule 兆焦</p>\n<p>calorie 卡路里</p>\n<p>Fahernheit 华氏温度</p>\n<p>illuminate 照亮，照明</p>\n<p>characterize 描述… 的特征，描绘</p>\n<p>domestication 驯养</p>\n<p>cultivate 耕作，开垦</p>\n<p>impetus 推动力，促进因素</p>\n<p>crescent 新月形</p>\n<p>circa 大约，左右</p>\n<p>the Renaissance 文艺复兴</p>\n<p>sailing 航行；航海</p>\n<p>usher in 开启；开创</p>\n<p>mechanical 机械的</p>\n<p>hay 干草</p>\n<p>bulky 体积大的；庞大的</p>\n<p>pipeline 管道</p>\n<p>internal 内部的；里面的</p>\n<p>combustion 燃烧</p>\n<p>internal 内燃机 vary 彼此相异</p>\n<p>wagon 四轮运货车</p>\n<p>contrast 差别 ，差异</p>\n<p>text1 全文翻译</p>\n<p>一句中文，加生词意思</p>\n<h1 id=\"历史人均能源消耗-per-capita人均的\"><a class=\"anchor\" href=\"#历史人均能源消耗-per-capita人均的\">#</a> 历史人均能源消耗  per capita 人均的</h1>\n<p>能源消耗的历史显示能源对提高我们每个人的生活质量至高重要。过去，社会依赖于各种各样的能源，而且一直被迫改变，从一种能源转换到另一种能源。以人均能源消耗量为衡量指标，可以更加客观的分析全球能源消费  be put in perspective 客观地</p>\n<p>E.Cook 对社会发展的六个不同阶段的人均能源消耗量进行了估算，结果如表一所示 societal 社会的</p>\n<p>表格显示，人均能源消耗量随着社会发展不断增加。</p>\n<p>远</p>\n<p>远古时期，能源以食物的形式为人类消耗，Cook 判断，在原始社会 (period labeled “primitive”) was food. 能量是我们生活中必不可少的一部分，其第一来源是食物，Cook 说，人类每天需要接近 2000 千卡的食物热量。一种食物的卡路里接近一千卡，一卡路里能让一 g 水提高一摄氏度。一摄氏度等于 1.8 华氏度。</p>\n<p>在狩猎时起，人们掌握了控制火的能力，这样他们可以使用木材取暖（heat）和做饭。火不仅能在晚上提供光亮，还能用于洞穴照明。木材是居住地（residential setting）附近人们能源消耗的第一来源。根据 Cook 的估计，一万年前欧洲人均每日能源消耗量是 5000 千卡</p>\n<p>原始农业时期的主要特征是驯养动物（characterized）人们能够利用动物来帮助他们种植作物，并且耕种农田。人类的生产水平提高，供不应求，这是农业发展的主要动力（impetus), 他推算，公元前 5000 年新月沃土（Fertile) 的人均日消费量是 12000 千卡，今天，人类继续使用动物干（perform）农活</p>\n<p>在先进农业时期，人类能源消耗量有所提高，人类学会了使用煤，并（built）发明了机器来收集（harvest）风和水。在文艺复兴早期（renaissance），人们亦可以利用风力推动帆船，用水力推动磨坊（mill），用煤炭和木材产生热量。交通成为能源消耗的重要部分（component）circa（圈）（大约，左右）</p>\n<p>蒸汽机（steam engine） usher in 开启，开创工业时期，提供了热能转换成机械能的途径。木材是产生蒸汽的第一能源。化石燃料煤炭最终取代了木材和干草成为工业化国家的主要（primary）能源来源。煤炭更同意储存（store）和运输，比木材和干草，木材和干草却较为笨重很不方便（bulky 巨大的，awkward 蹩脚的）</p>\n<p>下面开始要速过了，感觉记录了很多没有用的东西</p>\n<p>limited use for  personal transportation 私人交通工具上用处较少。unit mass 单位质量</p>\n<p>flow 流动，pipeline 管道，tank 油罐 ，</p>\n<p>internal combustion engine 内燃机 vary widely in size 体积大小不一  be scaled to fit on a wagon（四轮马车） 改成合适的尺寸</p>\n<p>相比之下，电力生产和分配分配系统让电动机（electricity generation）和电灯的广泛使用（widespread use）成为可能</p>\n<h1 id=\"能源可及性与健康\"><a class=\"anchor\" href=\"#能源可及性与健康\">#</a> 能源可及性与健康</h1>\n<p>inclusion 包含包括 prosperity 繁荣昌盛 specifically 专门地  recognition 认可承认</p>\n<p>centrality 中心地位 intergrated 综合的</p>\n<p>confront 面对，正视  myriad 无数的，极大量的  life expectancy 预期寿命  healthcare 医疗保健 industrialization 工业化  linkage 联系，关联</p>\n<p>enclosed 封闭的</p>\n<p>ventilation 通风 responsible 负责的 premature 过早的，提早的 immense 巨大的</p>\n<p>incomplete 不完全的 particulate 微粒的</p>\n<p>chimney 烟囱，烟道</p>\n<p>supersede 取代，替代</p>\n<p>stack 堆积，堆放</p>\n<p>chore 家庭杂物</p>\n<p>synergy 协同，协同作用</p>\n<p>unreliable 不可靠的</p>\n<p>additionally 此外，另外</p>\n<p>access to energy services is critical for advancing human development ,furthering social inclusion (融合) of the poorest and most vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable vulnerable in society and meeting many of the SDGs</p>\n<p>adopted 通过 2023 可持续发展纲领（agenda)</p>\n<p>signaling 表明  in its own right 它本身</p>\n<p>integrated 整体的 nature 特性 a lack of access to modern energy 没有现代能源 conront the  myriad (无数的，极大量的),life expectancy 预期寿命 ， deliver 兑现，提供，实现 quality education (优质教育)  adaptation and mitigation (适应和减缓)</p>\n<p>inequality 不平等</p>\n<p>linkage 联系   candle 蜡烛 kerosene 沒有 solid biomass 固体生物质  coal 煤炭</p>\n<p>ventilation 通风</p>\n<p>incomplete combustion 不完全的燃烧 combustion combustion release significant 巨大的 matter 物质 alternative 替代品 chimney 烟囱 fan 风扇 aid 辅助 combustion 燃烧 natural gas 天然气 solar power 太阳能 alognside 一起</p>\n<p>entirely superseding 完全取代 supersed 取代</p>\n<p>synergie 协同作用 underline 下划线，强调</p>\n<p>integrate 整合 initiative 举措 synergie  take for granted 理所当然   refrigerator 冰箱     vaccines 疫苗    contributing 主要的   flashlight 手电筒  intervention 干预</p>\n<p>particulate 微粒的 chimney 烟囱 supersede 取代 stack 堆积，对方 synergy 协同作用，协同物质 chore 家庭杂物  supersede   chimney particulate    linkage myriad 无数的大量的    particulae ventilation  immense</p>\n<p>externality 外部事物 emit 排放散发  pollutant 污染物体  irreversible 不可避免的逆转的 life cycle  生命周期   sulfur S  exacerbate 使加剧，恶化  respiratory  呼吸的  ailment 小病，不适合  asthma 哮喘病，气喘   nasal 鼻的  congestion 堵塞，阻塞  pulmonary 肺的  inflammatio  byproduct 副产品 oxie 氧化物 ozone 臭氧 suspectible 易受影响的 chronic 慢性的，长期的 precipitation 降水  acidic 酸的 aquatic 水生的  ecosystem 生态系统  aggravated 加重的，严重 elevated 偏高的  occurrence 发生，出现  particle 微粒 mercury 汞 originate 起源 airborne 空气传播的 neurological 神经病的，神经系统的 neurobehavioral 神经行为的 infant 婴儿，幼儿 quantify 量化，定量 kilowatt hour 千瓦时  volatile 挥发性的  organic 有机的   compound 化合物  mortality 死亡数  unpriced 未定价的 未标价的  impose 把… 强加给     degradation 退化，恶化 initially 起初 dissolve 溶解 fertility 繁殖力，生育能力</p>\n<p>utility bill 水电费    externalities 外部性</p>\n<p>extraction 开采  borne</p>\n<p>irreversible 不可逆转     life circle 生命周期   exacerate 加剧，恶化 ailment 疾病 byproduct ground-level 地面 tissue 组织   percipitation 降水 mildly 轻度   aquatic 水生的 haze 雾霾 chronic 慢性的 elevated 偏高的  airborne 空气传播的 mercury 汞   subsequently 随后 have sought to 尝试 quantify 量化 volatile 动荡的  degradation 下降</p>\n<p>剩下的直接看翻译了</p>\n",
            "tags": [
                "记录"
            ]
        },
        {
            "id": "http://example.com/2024/06/26/Go-Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BBblog%E5%90%AF%E5%8A%A8/",
            "url": "http://example.com/2024/06/26/Go-Vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BBblog%E5%90%AF%E5%8A%A8/",
            "title": "Go+Vue前后端分离blog启动",
            "date_published": "2024-06-26T05:13:40.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>业务思路</p>\n<p>1 先设计数据库结构</p>\n<p>2 前后端进行 api 接口的规定，进行交互</p>\n<p>3model 里存 User.go  数据库 User 的表的定义，增加，删除用户的操作</p>\n<p>与 api v1 里（v 几是有几代版本）的 addUser 交互（AddUser 调用 User) 的函数</p>\n<p>4route 里 router.go 进行路由的设置</p>\n<p>5config 进行配置的设置，不用去改源码</p>\n<p>6utils 放一些全局的组件，公共的内容</p>\n<p>7main.go 主函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tgorm.Model</span><br><span class=\"line\">\tUsername <span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;type:varchar(20);not null&quot; json:&quot;username&quot;`</span></span><br><span class=\"line\">\tPassword <span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;type:varchar(20);not  null&quot; json:&quot;password&quot;`</span></span><br><span class=\"line\">\tRole     <span class=\"type\">int</span>    <span class=\"string\">`gorm:&quot;type:int&quot; json:&quot;role&quot;`</span> <span class=\"comment\">//\t0为管理员，1为普通用户</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//里面的not null代表前后端对接时，如果传进来的User的某个属性为空，是否可以在表里创建数据，</span></span><br><span class=\"line\"><span class=\"comment\">//所以我们这里not null代表，必须不为空才能创建，而有关用户创建必须不为空，我们可以只在前端实现，</span></span><br><span class=\"line\"><span class=\"comment\">//跳出提示框，后端默认不处理数据库即可</span></span><br></pre></td></tr></table></figure>\n<p>golong 直接在函数里调用 scpypassword 和 chekcusername 这些函数的可读性比 BeforeSave 的可读性要高，同时 golong 性能好，所以时间区别不是很大</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">逻辑外键（Cid）：在你的Article结构体中，Cid字段作为逻辑外键，指向Category表的某个记录的主键。</span></span><br><span class=\"line\"><span class=\"comment\">预加载（Preload）：通过预加载Category，GORM会自动查询每篇文章对应的分类信息，并将其填充到Article结构体的Category字段中。</span></span><br><span class=\"line\"><span class=\"comment\">分页查询：代码中的Limit和Offset方法用于实现分页功能，确保每次只查询和返回指定数量的文章记录。</span></span><br><span class=\"line\"><span class=\"comment\">总的来说，虽然你的代码中没有直接操作物理外键，但通过GORM的foreignkey标签和Preload方法，它实现了类似外键的数据关联和完整性保护的逻辑。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Article <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tCategory Category <span class=\"string\">`gorm:&quot;foreignkey:Cid&quot;`</span></span><br><span class=\"line\">\tgorm.Model</span><br><span class=\"line\">\tTitle <span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;type:varchar(100);not null&quot; json:&quot;title&quot;`</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tCid     <span class=\"type\">int</span>    <span class=\"string\">`gorm:&quot;type:int;not null&quot; json:&quot;cid&quot;`</span></span><br><span class=\"line\">\tDesc    <span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;type:varchar(200);not null&quot; json:&quot;desc&quot;`</span></span><br><span class=\"line\">\tContent <span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;type:longtext;not null&quot; json:&quot;content&quot;`</span></span><br><span class=\"line\">\tImg     <span class=\"type\">string</span> <span class=\"string\">`gorm:&quot;type:varchar(100);not null&quot; json:&quot;img&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "教程",
                "Go",
                "前端",
                "后端",
                "Vue",
                "三剑客"
            ]
        },
        {
            "id": "http://example.com/2024/06/25/%E5%B0%8F%E5%AE%89%E6%8E%92/",
            "url": "http://example.com/2024/06/25/%E5%B0%8F%E5%AE%89%E6%8E%92/",
            "title": "小安排",
            "date_published": "2024-06-25T08:45:43.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> 博客最后新添加了音乐的功能</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" disabled=\"true\"><label for=\"cbx_1\"> 评论区的功能等我以后有时间让谷歌，百度等收录我的博客时再弄</label></li>\n</ul>\n<p><em><strong>哈哈哈下面纯属体验自己博客做笔记的功能，格式乱乱的</strong></em></p>\n<p><code>假期要：</code></p>\n<ol>\n<li>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>1.</mn><mi mathvariant=\"normal\">‘</mi><mtext>玩</mtext><mo>+</mo><mtext>跑步</mtext><mi mathvariant=\"normal\">‘</mi><mn>2.</mn><mi mathvariant=\"normal\">‘</mi><mtext>手搓一个比这个差很多，但自己会开心的博客，全自己手搓</mtext><mi mathvariant=\"normal\">‘</mi><mn>3.</mn><mi mathvariant=\"normal\">‘</mi><mtext>代码比赛前疯狂做题，看着好多</mtext><mi>u</mi><mi>p</mi><mtext>讲了好多题，馋了好久了</mtext><mi mathvariant=\"normal\">‘</mi><mn>4.</mn><mi mathvariant=\"normal\">‘</mi><mtext>完成微信小程序的开发</mtext><mi mathvariant=\"normal\">‘</mi><mn>5.</mn><mi mathvariant=\"normal\">‘</mi><mtext>一边跟着做项目，一边学计组</mtext><mi mathvariant=\"normal\">‘</mi><mn>6.</mn><mtext>学完计组就做英语六级加数据结构和离散数学必修课（其实感觉打代码比赛</mtext></mrow><annotation encoding=\"application/x-tex\">1. `玩+跑步`\n2. `手搓一个比这个差很多，但自己会开心的博客，全自己手搓`\n3. `代码比赛前疯狂做题，看着好多up讲了好多题，馋了好久了`\n4. `完成微信小程序的开发`\n5. `一边跟着做项目，一边学计组`\n6. 学完计组就做英语六级加数据结构和离散数学必修课（其实感觉打代码比赛\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">‘</span><span class=\"mord cjk_fallback\">玩</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord cjk_fallback\">跑</span><span class=\"mord cjk_fallback\">步</span><span class=\"mord\">‘</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">‘</span><span class=\"mord cjk_fallback\">手</span><span class=\"mord cjk_fallback\">搓</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">比</span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">差</span><span class=\"mord cjk_fallback\">很</span><span class=\"mord cjk_fallback\">多</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">但</span><span class=\"mord cjk_fallback\">自</span><span class=\"mord cjk_fallback\">己</span><span class=\"mord cjk_fallback\">会</span><span class=\"mord cjk_fallback\">开</span><span class=\"mord cjk_fallback\">心</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">博</span><span class=\"mord cjk_fallback\">客</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">全</span><span class=\"mord cjk_fallback\">自</span><span class=\"mord cjk_fallback\">己</span><span class=\"mord cjk_fallback\">手</span><span class=\"mord cjk_fallback\">搓</span><span class=\"mord\">‘</span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">‘</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">码</span><span class=\"mord cjk_fallback\">比</span><span class=\"mord cjk_fallback\">赛</span><span class=\"mord cjk_fallback\">前</span><span class=\"mord cjk_fallback\">疯</span><span class=\"mord cjk_fallback\">狂</span><span class=\"mord cjk_fallback\">做</span><span class=\"mord cjk_fallback\">题</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">看</span><span class=\"mord cjk_fallback\">着</span><span class=\"mord cjk_fallback\">好</span><span class=\"mord cjk_fallback\">多</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">p</span><span class=\"mord cjk_fallback\">讲</span><span class=\"mord cjk_fallback\">了</span><span class=\"mord cjk_fallback\">好</span><span class=\"mord cjk_fallback\">多</span><span class=\"mord cjk_fallback\">题</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">馋</span><span class=\"mord cjk_fallback\">了</span><span class=\"mord cjk_fallback\">好</span><span class=\"mord cjk_fallback\">久</span><span class=\"mord cjk_fallback\">了</span><span class=\"mord\">‘</span><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">‘</span><span class=\"mord cjk_fallback\">完</span><span class=\"mord cjk_fallback\">成</span><span class=\"mord cjk_fallback\">微</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">小</span><span class=\"mord cjk_fallback\">程</span><span class=\"mord cjk_fallback\">序</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">开</span><span class=\"mord cjk_fallback\">发</span><span class=\"mord\">‘</span><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">‘</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">边</span><span class=\"mord cjk_fallback\">跟</span><span class=\"mord cjk_fallback\">着</span><span class=\"mord cjk_fallback\">做</span><span class=\"mord cjk_fallback\">项</span><span class=\"mord cjk_fallback\">目</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">边</span><span class=\"mord cjk_fallback\">学</span><span class=\"mord cjk_fallback\">计</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord\">‘</span><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord cjk_fallback\">学</span><span class=\"mord cjk_fallback\">完</span><span class=\"mord cjk_fallback\">计</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">就</span><span class=\"mord cjk_fallback\">做</span><span class=\"mord cjk_fallback\">英</span><span class=\"mord cjk_fallback\">语</span><span class=\"mord cjk_fallback\">六</span><span class=\"mord cjk_fallback\">级</span><span class=\"mord cjk_fallback\">加</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mord cjk_fallback\">结</span><span class=\"mord cjk_fallback\">构</span><span class=\"mord cjk_fallback\">和</span><span class=\"mord cjk_fallback\">离</span><span class=\"mord cjk_fallback\">散</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">学</span><span class=\"mord cjk_fallback\">必</span><span class=\"mord cjk_fallback\">修</span><span class=\"mord cjk_fallback\">课</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord cjk_fallback\">其</span><span class=\"mord cjk_fallback\">实</span><span class=\"mord cjk_fallback\">感</span><span class=\"mord cjk_fallback\">觉</span><span class=\"mord cjk_fallback\">打</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">码</span><span class=\"mord cjk_fallback\">比</span><span class=\"mord cjk_fallback\">赛</span></span></span></span></span></p>\n</li>\n</ol>\n",
            "tags": [
                "计划",
                "to do list"
            ]
        },
        {
            "id": "http://example.com/2024/06/25/%E4%BC%9A%E6%B0%B8%E8%BF%9C%E8%AE%B0%E7%9D%80%E4%BD%A0%E7%9A%84%EF%BC%8C%E6%88%91%E7%94%A8%E4%BA%86%E5%BE%88%E5%A4%9A%E5%B9%B4%E7%9A%84%E5%A4%B4%E5%83%8F/",
            "url": "http://example.com/2024/06/25/%E4%BC%9A%E6%B0%B8%E8%BF%9C%E8%AE%B0%E7%9D%80%E4%BD%A0%E7%9A%84%EF%BC%8C%E6%88%91%E7%94%A8%E4%BA%86%E5%BE%88%E5%A4%9A%E5%B9%B4%E7%9A%84%E5%A4%B4%E5%83%8F/",
            "title": "会永远记着你的，我用了很多年的头像",
            "date_published": "2024-06-25T06:12:30.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p><img data-src=\"https://cdn.jsdelivr.net/gh/chjqp/hubterimage@main/img/202406251418797.jpg\" alt=\"\"></p>\n<p>主要是学了计算机可以把一些网上的其他不是很满意的问雅的照片变的精致</p>\n<p>真的真的，很欣赏问雅的乐观</p>\n\n    <div id=\"aplayer-AeUbnvaW\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"2131378852\" data-server=\"neteaset\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"\n    ></div>\n\n    <div id=\"aplayer-WhPBUwVe\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"27268032\" data-server=\"neteaset\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#ad7a86\"\n    ></div>\n",
            "tags": [
                "生活",
                "不要忘"
            ]
        },
        {
            "id": "http://example.com/2024/06/25/share-code/",
            "url": "http://example.com/2024/06/25/share-code/",
            "title": "share code",
            "date_published": "2024-06-24T18:40:04.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>等过段时间有空了，我就把 C++ QT 银行可视化大作业，python 数值分析大作业，精益创业做的</p>\n<p>随机分组小程序，在 spr 考核时做的轮廓识别，石头剪刀布手势识别，实时识别数字并语音播报，pnp 测距，yolov5 的训练源码等提交到 github 仓库，并把链接贴这里</p>\n<p>… 持续更新</p>\n",
            "tags": [
                "贡献",
                "github仓库链接"
            ]
        }
    ]
}